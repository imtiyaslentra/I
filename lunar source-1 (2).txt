local Stats = game:GetService('Stats')
local Players = game:GetService('Players')
local RunService = game:GetService('RunService')
local ReplicatedStorage = game:GetService('ReplicatedStorage')
local Celery_Util = loadstring(game:HttpGet('https://raw.githubusercontent.com/CeleryHub/CeleryHub/main/CeleUtil.lua'))()
local local_player = Players.LocalPlayer
local camera = workspace.CurrentCamera
local celery_Data, closest_Entity, parry_remote = nil, nil, nil -- Global Settings
getgenv().aura_Enabled = false
getgenv().hit_effect_Enabled = false
getgenv().night_mode_Enabled = false
getgenv().self_effect_Enabled = false
local Services = { game:GetService('AdService'), game:GetService('SocialService') } -- UI Library

-- Initialization
local function initialize(dataFolderName)
    if not game:GetService("CoreGui"):FindFirstChild(dataFolderName) then
        celery_Data = Instance.new('Folder', game:GetService('CoreGui'))
        celery_Data.Name = dataFolderName
    end
end

-- Optimize FPS and Network Settings
local function optimizePerformance()
    -- Boost FPS by disabling unnecessary features and reducing settings
    game:GetService("Workspace").StreamingEnabled = true
    settings().Rendering.QualityLevel = Enum.QualityLevel.Level01 -- Lowest quality for best FPS
    game:GetService("Lighting").GlobalShadows = false -- Disable shadows
    game:GetService("Lighting").Brightness = 2 -- Adjust lighting for smoothness
    game:GetService("UserInputService").MouseDeltaSensitivity = 0.5 -- Reduce mouse lag
    setfpscap(120) -- Increase FPS cap to 120 for smoother performance
    
    -- Optimize memory usage
    local function optimizeMemoryUsage()
        local serviceMemoryLimits = {
            ['Players'] = 2048,
            ['Workspace'] = 2048,
            ['ReplicatedStorage'] = 2048,
            -- Add more services as needed
        }

        for serviceName, limit in pairs(serviceMemoryLimits) do
            local service = game:GetService(serviceName)
            if service then
                -- Assuming there is a method to set memory limit
                -- Uncomment if such a method exists
                -- service:SetMemoryLimit(limit)
            end
        end
    end
    optimizeMemoryUsage()
end

-- Closest Entity
local function getClosestEntity(Object)
    local closest
    local max_distance = math.huge
    for _, entity in ipairs(workspace.Alive:GetChildren()) do
        if entity.Name ~= local_player.Name then
            local distance = (Object.Position - entity.HumanoidRootPart.Position).Magnitude
            if distance < max_distance then
                closest_Entity = entity
                max_distance = distance
            end
        end
    end
    return closest_Entity
end

-- Resolve Parry Remote
function resolve_parry_Remote()
    local temp_remote = game:GetService("VirtualUser"):WaitForChild("\n\n\n\n\n")
    if not temp_remote then
        print("No RemoteEvent found.") -- Debug: Tidak ada RemoteEvent
        return
    end
    if not temp_remote:IsA('RemoteEvent') then
        print("Found object is not a RemoteEvent.") -- Debug: Bukan RemoteEvent
        return
    end
    originalParryRemote = temp_remote
    print("RemoteEvent resolved successfully.") -- Debug: RemoteEvent berhasil
end

-- Aura Table
local aura_table = {
    canParry = true,
    is_Spamming = false,
    parry_Range = 0,
    spam_Range = 0,
    hit_Count = 0,
    hit_Time = tick(),
    ball_Warping = tick(),
    is_ball_Warping = false,
    target_Dead = false  -- New variable to track if the target is dead
}

-- Event Listeners
ReplicatedStorage.Remotes.ParrySuccess.OnClientEvent:Connect(function()
    if getgenv().hit_effect_Enabled then
        local hit_effect = game:GetObjects("rbxassetid://18894222844")[1]
        hit_effect.Parent = Celery_Util.getBall()
        hit_effect:Emit(3)
        task.delay(5, function() hit_effect:Destroy() end)
    end
end)

ReplicatedStorage.Remotes.ParrySuccessAll.OnClientEvent:Connect(function()
    aura_table.hit_Count += 1
    task.delay(0.15, function() aura_table.hit_Count -= 1 end)
end)

workspace:WaitForChild("Balls").ChildRemoved:Connect(function()
    aura_table.hit_Count = 0
    aura_table.is_ball_Warping = false
    aura_table.is_Spamming = false
end)

-- Detect when the target dies
workspace.Alive.ChildRemoved:Connect(function(child)
    if child == closest_Entity then
        aura_table.target_Dead = true
        aura_table.is_Spamming = false  -- Stop spamming when the target is dead
    end
end)

-- Load Fluent Library and Addons
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()

-- Set up the SaveManager with Fluent
SaveManager:SetLibrary(Fluent)
SaveManager:SetFolder("FluentScriptHub")  -- You can change the folder name as needed
SaveManager:IgnoreThemeSettings()  -- Ignore theme settings for autosave
SaveManager:SetIgnoreIndexes({})  -- Ignore specific indexes if needed
SaveManager:LoadAutoloadConfig()  -- Load configuration on startup

-- Create Main Window
local Window = Fluent:CreateWindow({
    Title = "Fluent UI",
    SubTitle = "by dawid",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark"
})

-- Create Tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Visuals = Window:AddTab({ Title = "Visuals", Icon = "eye" }),
}

-- Toggle: Auto Parry/Spam
local AutoParrySpamToggle = Tabs.Main:AddToggle("AutoParrySpam", {
    Title = "Auto Parry/Spam",
    Default = false
})

AutoParrySpamToggle:OnChanged(function(enabled)
    resolveParryRemote()  -- Assuming this function is defined elsewhere in your script
    getgenv().aura_Enabled = enabled
    Fluent:Notify({
        Title = "Auto Parry/Spam",
        Content = enabled and "Auto Parry/Spam Enabled" or "Auto Parry/Spam Disabled",
        Duration = 5
    })
    SaveManager:Set("AutoParrySpam", enabled)  -- Autosave toggle state
end)

-- Toggle: Night Mode
local NightModeToggle = Tabs.Main:AddToggle("NightMode", {
    Title = "Night Mode",
    Default = false
})

NightModeToggle:OnChanged(function(enabled)
    getgenv().night_mode_Enabled = enabled
    Fluent:Notify({
        Title = "Night Mode",
        Content = enabled and "Night Mode Enabled" or "Night Mode Disabled",
        Duration = 5
    })
    SaveManager:Set("NightMode", enabled)  -- Autosave toggle state
end)

-- Manual Spam Button in Visuals Tab
Tabs.Visuals:AddButton({
    Title = "Manual Spam",
    Callback = function()
        loadstring(game:HttpGet("https://pastebin.com/raw/4Wx5dumR"))()
        Fluent:Notify({
            Title = "Manual Spam",
            Content = "Manual spam executed.",
            Duration = 5
        })
    end
})

-- Add Notification for Script Load
Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded successfully.",
    Duration = 5
})

-- Select the first tab by default
Window:SelectTab(1)

-- Auto-load saved settings into toggles
AutoParrySpamToggle:SetValue(SaveManager:Get("AutoParrySpam") or false)
NightModeToggle:SetValue(SaveManager:Get("NightMode") or false)

-- Optional: Additional configurations or features can be added here

-- Aura Mechanics
local lastParryTime = tick()
local parryThrottle = 0.05 -- Faster spam speed

RunService.PreRender:Connect(function()
    if not getgenv().aura_Enabled or not closest_Entity then return end
    
    if workspace.Alive:FindFirstChild(closest_Entity.Name) and workspace.Alive:FindFirstChild(closest_Entity.Name).Humanoid.Health > 0 and aura_table.is_Spamming and local_player:DistanceFromCharacter(closest_Entity.HumanoidRootPart.Position) <= aura_table.spam_Range then
        local self = Celery_Util.getBall()
        if self then
            parry_remote:FireServer(
                0.5,
                CFrame.new(camera.CFrame.Position, Vector3.zero),
                {[closest_Entity.Name] = closest_Entity.HumanoidRootPart.Position},
                {closest_Entity.HumanoidRootPart.Position.X, closest_Entity.HumanoidRootPart.Position.Y},
                false
            )
        end
    end
end)

RunService.Heartbeat:Connect(function()
    if not getgenv().aura_Enabled then return end
    
    local ping = Stats.Network.ServerStatsItem['Data Ping']:GetValue() / 10
    local self = Celery_Util.getBall()
    
    if not self then return end
    
    self:GetAttributeChangedSignal('target'):Once(function()
        aura_table.canParry = true
    end)
    
    if self:GetAttribute('target') ~= local_player.Name or not aura_table.canParry then return end
    
    closest_Entity = getClosestEntity(local_player.Character.PrimaryPart)
    if not closest_Entity then return end
    
    local player_Position = local_player.Character.PrimaryPart.Position
    local ball_Position = self.Position
    local ball_Velocity = self.AssemblyLinearVelocity
    
    if self:FindFirstChild('zoomies') then
        ball_Velocity = self.zoomies.VectorVelocity
    end
    
    local ball_Direction = (player_Position - ball_Position).Unit
    local ball_Distance = local_player:DistanceFromCharacter(ball_Position)
    local ball_Dot = ball_Direction:Dot(ball_Velocity.Unit)
    local ball_Speed = ball_Velocity.Magnitude
    local ball_speed_Limited = math.min(ball_Speed / 1000, 0.1)
    local ball_predicted_Distance = (ball_Distance - ping / 15.5) - (ball_Speed / 3.5)
    
    local target_Position = closest_Entity.HumanoidRootPart.Position
    local target_Distance = local_player:DistanceFromCharacter(target_Position)
    local target_distance_Limited = math.min(target_Distance / 10000, 0.1)
    local target_Direction = (local_player.Character.PrimaryPart.Position - closest_Entity.HumanoidRootPart.Position).Unit
    local target_Velocity = closest_Entity.HumanoidRootPart.AssemblyLinearVelocity
    local target_isMoving = target_Velocity.Magnitude > 0
    local target_Dot = target_isMoving and math.max(target_Direction:Dot(target_Velocity.Unit), 0) or 0
    
    aura_table.spam_Range = math.max(ping / 10, 15) + ball_Speed / 7
    aura_table.parry_Range = math.max(math.max(ping, 4) + ball_Speed / 3.5, 9.5)
    aura_table.is_Spamming = aura_table.hit_Count > 1 or ball_Distance < 13.5
    
    if ball_Dot < -0.2 then
        aura_table.ball_Warping = tick()
    end
    
    if (tick() - aura_table.ball_Warping) >= 0.1 + target_distance_Limited - ball_speed_Limited or ball_Distance <= 10 then
        aura_table.is_ball_Warping = false
    else
        aura_table.is_ball_Warping = true
    end
    
    -- Check if the ball is within range before spamming
    if ball_Distance <= aura_table.parry_Range and not aura_table.is_Spamming and not aura_table.is_ball_Warping then
        if tick() - lastParryTime >= parryThrottle then
            parry_remote:FireServer(
                0.5,
                CFrame.new(camera.CFrame.Position, closest_Entity.HumanoidRootPart.Position),
                {[closest_Entity.Name] = target_Position},
                {target_Position.X, target_Position.Y},
                false
            )
            lastParryTime = tick()
            aura_table.canParry = false
            aura_table.hit_Time = tick()
            aura_table.hit_Count += 1
            if aura_table.hit_Count >= 2 then
                task.delay(0.1, function() aura_table.hit_Count -= 1 end) -- Decrease delay to maintain speed
            end
        end
    end
end)

-- Initialize the script
initialize("Celery_Data")
optimizePerformance()
